from Attendance import Attendance
from Employee import Employee
from Salary import Salary
from Intern import Intern
from datetime import datetime

import json
from prettytable import PrettyTable
import os
import string 
import random
os.system('cls')

class HRMIS:

    """HRMIS class
    args: none
    returns: none

    This class serves to help the human resourse manage to manege the employees, It serves three functionalities. Manage employees
    (add employee, remove employee and view all employees)
    Manage attendance (mark attendance, view attendance)
    Calculate employees salary and generate payslips for all employees. It also help in viewing the payments of a single employee 
    in the system as well viewing the 
    """
    def __init__(self, employee_database, attendance_database, salary_database):
        self.__employee_database = employee_database
        self.__attendance_database = attendance_database
        self.__salary_database = salary_database

    def email_generator(self, first_name, last_name, initial = '' ,company = 'onepeople'):
        """This fumction automatically generete an email aaddres by using the company email standard
        args: first name, last name, initiol (incase the email was take before), company email structure
        return: email"""
        email = str(first_name) + '.' + str(last_name) + str(initial) + '@' + str(company) + '.org'
        return email.lower()
    
    def employee_id_gerenerato(self, id_length = 5, id_initial = 'CMU'):
        """This function automatically generate an employee id of certain characters using company id initial
        args: id length, id initial
        returns: employee id generated by the function. 
        
        """
        password_characters = string.ascii_uppercase + string.digits + string.ascii_lowercase # + string.punctuation
        password = ''.join(random.choice(password_characters) for _ in range(id_length))
        return str(id_initial + password)

    def add_employee(self):

        """Add employee method
        args: none
        returns: None
        """
        os.system('cls')
        print('\nYou selected to add an employee you want to add\n1. Intern \n2. Manager \n3. Director \n4. Exit')
        choice = input('Enter your choice: ')

        while choice not in ['1', '2', '3', '4']:
            os.system('cls')
            print('Invalid choice: Try Again!\n')
            print('\n1. Intern \n2. Manager \n3. Director \n4. Exit')
            choice = input('Enter your choice: ')
            
        if choice == '4':
            os.system('cls')
            print('Exiting...Thank you for using HRMS\n')
            exit()
        # employee_id = input('Enter employee ID: ')
        employee_id = self.employee_id_gerenerato()
        
        try: # check is employee database is available, if availabe, read the database
            with open(self.__employee_database, "r") as f:
                content = json.load(f)

            while employee_id in content:
                
                os.system('cls')
                employee_id = self.employee_id_gerenerato() # generete an employee id

        except FileNotFoundError:
            os.system('cls')
            print("Employee database does not exist, we will create it")

        first_name = input('Enter first name: ')
        last_name = input('Enter last name: ')

        # Generate unique email adrees
        email = self.email_generator(first_name, last_name)
        for key, values in content.items():
            if values['email'] == email:
                os.system('cls')
                initil =self.employee_id_gerenerato(id_length = 1, id_initial = '')
                email = self.email_generator(first_name,initil, last_name)
            else:
                pass
        
        os.system('cls')
        print(f'Email of {first_name} generated automatical: {email}')
        print(f'Employee Id  of {first_name} is generated automaticaly: {employee_id}')
        

        

        base_salary = eval(input('Enter base salary: '))


        if choice == '1': # Add intern
            university_name = input('You are going to add an intern: What the intern university name: ')
            program_name = input('What the intern program name: ')
            internership_duration = int(input('What is the internership duration (between 3 nd 6): '))

            from Intern import Intern
            # Create an intern object

            Intern = Intern(employee_id,
                            first_name,
                            last_name,
                            email,
                            base_salary,
                            university_name,
                            program_name,
                            0
                            )
            Intern.set_internership_duration = internership_duration
            ## Open the employee database and check if the employee id already exists
            try: # read employee databse and dump the new employee object, if not exist, create it, do the same for all new employee
                with open(self.__employee_database, "r") as f:
                    content = json.load(f)

                if employee_id in content:
                    os.system('cls')
                    print("Employee already exists")
                    return None
                else:
                    content[Intern.get_employee_id] = {
                        "first_name":Intern.get_first_name,
                        "last_name": Intern.get_last_name,
                        "email": Intern.get_email,
                        "base salary": Intern.get_base_salary,
                        "university name": Intern.get_university_name,
                        "program name": Intern.get_program_name,
                        "internership duration": Intern.get_internership_duration,
                        "Job Level": "Intern" 
                    }

                with open(self.__employee_database, "w") as f:
                    json.dump(content, f)
                
                os.system('cls')
                print("Employee added successfully")
                return None

            except FileNotFoundError:
                with open(self.__employee_database, "w") as f:
                    json.dump({Intern.get_employee_id: {
                        "first_name":Intern.get_first_name,
                        "last_name": Intern.get_last_name,
                        "email": Intern.get_email,
                        "base salary": Intern.get_base_salary,
                        "university name": Intern.get_university_name,
                        "program name": Intern.get_program_name,
                        "internership duration": Intern.get_internership_duration,
                        "Job Level": "Intern"
                    }}, f)

                os.system('clc')
                print("Employee added successfully")


        elif choice == '2': # Add  a manager : use the same process as you can use with adint and intern
            department_name = input('You are adding a Manager: What the department name: ')
            number_of_direct_reports = int(input('How many direct reports: '))

            from Manager import Manager
            Manager = Manager(employee_id,
                                first_name,
                            last_name,
                            email,
                            base_salary,
                            department_name,
                            number_of_direct_reports)
                                
            ## Open the employee database and check if the employee id already exists
            try:
                with open(self.__employee_database, "r") as f:
                    content = json.load(f)

                if employee_id in content:
                    os.system('cls')
                    print("Employee already exists")
                    return None
                else:
                    content[Manager.get_employee_id] = {
                        "first_name":Manager.get_first_name ,
                        "last_name": Manager.get_last_name,
                        "email": Manager.get_email,
                        "base salary": Manager.get_base_salary,
                        "department name": Manager.get_department_name,
                        "number of direct reports": Manager.get_number_of_direct_reports,
                        "Job Level": "Manager"
                    }

                with open(self.__employee_database, "w") as f:
                    json.dump(content, f)

                os.system('cls')
                print("Employee added successfully")
                return None

            except FileNotFoundError:
                with open(self.__employee_database, "w") as f:
                    json.dump({Manager.get_employee_id: {
                        "first_name":Manager.get_first_name ,
                        "last_name": Manager.get_last_name,
                        "email": Manager.get_email,
                        "base salary": Manager.get_base_salary,
                        "department name": Manager.get_department_name,
                        "number of direct reports": Manager.get_number_of_direct_reports,
                        "Job Level": "Manager"
                    }}, f)
                os.system('cls')
                print("Employee added successfully")
        elif choice == '3': # Add director: Repeate the same procedure to add a directors
            department = input('Enter the department name: ')
            annual_bonus = eval(input('Enter the annual bonus: '))

            from Director import Director
            Director = Director(employee_id,
                                    first_name,
                                    last_name,
                                    email,
                                    base_salary,
                                    department,
                                    annual_bonus
                                    )
            ## Open the employee database and check if the employee id already exists
            try:
                with open(self.__employee_database, "r") as f:
                    content = json.load(f)

                if employee_id in content:
                    os.system('cls')
                    print("Employee already exists")
                    return None
                else:
                    content[Director.get_employee_id] = {
                        "first_name":Director.get_first_name ,
                        "last_name": Director.get_last_name,
                        "email": Director.get_email,
                        "base salary": Director.get_base_salary,
                        "department name": Director.get_department,
                        "annual bonus": Director.get_annual_bonus,
                        "Job Level": "Director"
                    }

                with open(self.__employee_database, "w") as f:
                    json.dump(content, f)
                
                os.system('cls')
                print("Employee added successfully")
                return None

            except FileNotFoundError:
                with open(self.__employee_database, "w") as f:
                    json.dump({Director.get_employee_id: {
                        "first_name":Director.get_first_name ,
                        "last_name": Director.get_last_name,
                        "email": Director.get_email,
                        "base salary": Director.get_base_salary,
                        "department name": Director.get_department,
                        "annual bonus": Director.get_annual_bonus,
                        "Job Level": "Director"
                    }}, f)

                os.system('cls')
                print("Employee added successfully")

        else:
            os.system('cls')
            print("Exiting... Thanks for using HRMS")
            exit()

    
    def remove_employee(self, employee_id):
        os.system('cls')
        """Remove employee method, it will take an employee id are remove that employee from databases in
            (employee database, salary database as well as attendance dabase)
        args: employee id
        returns: None
        """

        # Remove an employee in employee from the 
        try: 
            with open(self.__employee_database, "r") as f:
                content = json.load(f)
            del content[str(employee_id)]

            with open(self.__employee_database, "w") as f:
                json.dump(content, f)

            
            print(f"Employee '{employee_id}' removed successfully")

            # remove the employee in attendance database
            try: 
                with open(self.__attendance_database, "r") as f:
                    content = json.load(f)
                    del content[str(employee_id)]
                with open(self.__attendance_database, "w") as f:
                    json.dump(content, f)
                print(f"Employee '{employee_id}' removed successfully on attendance database")
            except FileNotFoundError:
                
                print("The attendance file not found")
            except KeyError:
                
                print(f"Employee '{employee_id}' not found in attendance database")

            # remove the employee in salary database
            try: 
                with open(self.__salary_database, "r") as f:
                    content = json.load(f)
                    del content[str(employee_id)]
                with open(self.__salary_database, "w") as f:
                    json.dump(content, f)
                print(f"Employee '{employee_id}' removed successfully on salary database")
            except FileNotFoundError:
                # os.system('cls')
                print("The sary data file not found")
            except KeyError:

                # os.system('cls')
                print(f"Employee '{employee_id}' not found in our payrol\n")

        except FileNotFoundError:
            # os.system('cls')
            print("Emploee database file not found")
        
        except KeyError:
            
            print("Employee not found in our employee database, check with your HR")

    def view_employee_list(self):
        """View employee list method, it will take no argument but it will open employee database and display the list of
        all employees in a tablular format.
        args: none
        returns: None
        """
        try:
            with open(self.__employee_database, "r") as f:
                content = json.load(f)

            # create a pretty table to help us display employee list                    
            table = PrettyTable()
            table.field_names = ["Employee ID", "First Name", "Last Name", "Email","Job Level", "Base Salary"]

            for key, value in content.items():
                table.add_row([key, value['first_name'], value['last_name'], value['email'],value['Job Level'], f"${float(value['base salary']):.2f}"])
            
            # cleare screen and print the pretty table we create above
            os.system('cls')
            print("Below is the table that shows our employees information")
            print(table,'\n')
        
        # if the employee database file not found, handle this exception
        except FileNotFoundError:
            os.system('cls')
            print("The employee database file not found")
            
            return None
        

    def update_employee(self, employee_id):
        """This function will guide you in updating employee information, ask for employee id of the employee you want to update and ask 
        you on which information to update or to keep, 
        args: employee id 
        return: None
        Note: This function will not help you update job levels (we will work on this function in next release)
        
        """
        # read the employee file and and ask the user for information  you want to update
        # It can allow you to update first name, last name, base salary, email only, not JOB LEVEL, and we undertand that this might be helpfull but
        # we will work on this function in next release of this system
        # if the employee id not found, handle this exception

        try:
            with open(self.__employee_database, "r") as f:
                content = json.load(f)

            if employee_id not in content:
                os.system('cls')
                print(f"Employee '{employee_id}' not found")
                return None
            
            
            choice = input('Do you want to change the first name(y/n)?: ')
            while choice not in ['y', 'n']:
                os.system('cls')
                print('Invalid choice')
                choice = input('Do you want to change the first name(y/n)?: ')
                

            if choice == 'y':                 
                content[employee_id]['first_name'] = input('Enter new first name: ')
            else:
                pass
            
            choice = input('Do you want to change the last name(y/n)?: ')
            while choice not in ['y', 'n']:
                os.system('cls')
                print('Invalid choice')
                choice = input('Do you want to change the last name(y/n)?: ')
            if choice == 'y':
                content[employee_id]['last_name'] = input('Enter new last name: ')
                
            else:
                pass
            
            choice = input('Do you want to change the base salary(y/n)?: ')
            while choice not in ['y', 'n']:
                os.system('cls')
                print('Invalid choice')
                choice = input('Do you want to change the base salary (y/n)?: ')
            if choice == 'y':
                content[employee_id]['base salary'] = input('Enter new base salary: ')
            else:
                pass

            choice = input('Do you want your email to be changed (y/n)?: ')
            while choice not in ['y', 'n']:
                os.system('cls')
                print('Invalid choice')
                choice = input('Do you want your email to be changed (y/n)?: ')
                
            if choice == 'y':
                email = self.email_generator(first_name = content[employee_id]['first_name'] , last_name = content[employee_id]['last_name'])
                for key, values in content.items():
                    if values['email'] == email:
                        os.system('cls')
                        initial_characters = string.ascii_uppercase + string.digits + string.ascii_lowercase # + string.punctuation
                        initil = ''.join(random.choice(initial_characters) for _ in range(1))                            
                        email = self.email_generator(content[employee_id]['first_name'],
                                                initil,
                                                content[employee_id]['last_name']
                                                )
                    else:
                        pass         
                content[employee_id]['email'] = email
            
            else:
                pass

            with open(self.__employee_database, "w") as f:
                json.dump(content, f)

            os.system('cls')
            print("Employee updated successfully")

        except FileNotFoundError:
            print("The employee database file not found")
            return None

    def employee_management(self):
        """Employee management method
        args: none
        returns: none
        """
        os.system('cls')
        print('\nYou selected Employee management function\n1. Add Employee\n2. Remove employee\n3. View Employee Report \n4. Update Employee \n5. Exit')
        choice = input('Enter your choice: ')
        while choice not in ['1', '2', '3', '4', '5']:
            os.system('cls')
            print('Invalid choice: Try Again')
            print('\n1. Add Employee\n2. Remove employee\n3. View Employee Report \n4. Update Employee \5. Exit\n')
            choice = input('Enter your choice: ')

        if choice == '5': # To exit
            os.system('cls')
            print('Exiting...Thank you for using HRMS\n')
            exit() 

        if choice == '1': # To add an employee
            self.add_employee() # run add employee function above
        elif choice == '2': # to remove an employee

            # input the ID of an employee you want to remove, you will remove the employee where s/he is \
            # (employee database, payrole and attendance datasse if he exist there)
            employee_id = input('Enter employee ID: ')
            # run remove employee function above
            self.remove_employee(employee_id)

        elif choice == '3': ## to view a list of all employee
            # creat screen and run view employee fundtion
            os.system('cls')
            self.view_employee_list()

        elif choice == '4': # update imployee
            os.system('cls')
            print('You selected to update employee: You can not update Job Level!')
            employee_id = input('Enter employee ID: ')       
            # run update employee function above
            self.update_employee(employee_id)



    
    
    def attendance_tracking(self):
        """This funstion will  help the HR manager to view attendance of employees, it does not have parameters because it will
            ask the user for inputs according to the sub function s/he wants to perform
            args: None
            return: None
        """

        os.system('cls')

        print('You selected Attendance Tracking function\n1. Add Attendance\n2. View Attendance\n3. Exit')
        choice = input('Select one choice: ')
        
        from Attendance import Attendance
        attendance = Attendance(self.__employee_database, self.__attendance_database)
        if choice == '1': #Add attendance
            attendance.__main__()


        elif choice == '2': #View attendance            
            os.system('cls')
            print('You selected to view attendance (total working hours): \n1. Selected Employee \n2. All \n3. Exit')
            choice = input('Enter your choice: ')
            while choice not in ['1', '2', '3']:
                os.system('cls')
                print('Invalid choice! Try again or enter 0 to exit')
                print('1. Selected Employee \n2. All \n3. Exit')
                choice = input('Enter your choice: ')

            if choice == '1': #calculate total working hours for one emploee
                id = input('Enter employee id: ')
                start_date = input("Enter the start date in dd-MM-YYYY format: ")
                end_date = input("Enter the end date in dd-MM-YYYY format: ")

                total_working_hour = attendance.calculate_working_hours(id, start_date=start_date, end_date=end_date)
                os.system('cls')
                print(f"Total working hour for employee {id} is {total_working_hour}")

            elif choice == '2': #calculate total working hours for all employee

                try:

                    with open(self.__attendance_database, mode='r') as attendance_data:
                        data = json.load(attendance_data)
                    
                    start_date = input("Enter the start date in dd-MM-YYYY format: ")
                    end_date = input("Enter the end date in dd-MM-YYYY format: ")
                    attendance_table = PrettyTable()
                    attendance_table.field_names = ["Employee ID","From", "TO", "Total Hours (hours)"]

                    for employee_id in data:
                        total_hours = attendance.calculate_working_hours(employee_id, start_date, end_date)
                        attendance_table.add_row([employee_id, start_date, end_date,  total_hours])

                    # Display the attendance table
                    os.system('cls')
                    print('The Table below distplays the total from hours of each employee')
                    print(attendance_table)

                except FileNotFoundError:
                    print("No attendance data found")
            
            else:
                pass
        if choice == '3':
            os.system('cls')
            print("Exiting... Thanks for using HRMS\n")
            exit()





    def view_salary_summary(self):
        # chech if the employee id is valid (exist in employee database)
        try:
            with open(self.__employee_database, "r") as f:
                content = json.load(f)

            
            # if it exist, open salary data database and print salary information
            with open(self.__salary_database, "r") as f:
                content = json.load(f)

            os.system('cls')
            print('Do you want to see salary history of all employes or just one? \n1. All \n2. Just One \n*. Exit')
            choice = input('Enter your choice: ')
            if choice not in ['1', '2']:
                os.system('cls')
                print('Invalid choice')
                
            table = PrettyTable()
            table.field_names = ["Employee ID", "Date", "Base Salary", "Tax", "Allowance", "Bonus", "Net Salary"]

            if choice == '1': # View salary data for all employees
                # Iterate through the JSON data and add rows to the table
                month = input('Enter month MM: ')
                for key, data in content.items():
                    for entry in data:
                        for date, information in entry.items():
                            date_object = datetime.strptime(date, '%Y-%m-%d %H:%M:%S')
                            month_number = date_object.month
                            if month_number == int(month):
                                table.add_row([key, date, information["Base salary"], information["Tax"],information["Allowance"], information["Bonus"], information["Net salary"]])
                os.system('cls')
                print(f'This is the summary of salary report of all employees in payrole for month of {month}')

            if choice == '2':
                employee_id = input('Enter employee ID: ')
                if employee_id not in content:
                    os.system('cls')
                    print("Employee ID not found in salary database(payrol)")
                    exit()

                else:
                    month = input('Enter month MM: ')
                    for entry in content[employee_id]:
                        for date, information in entry.items():
                            date_object = datetime.strptime(date, '%Y-%m-%d %H:%M:%S')
                            month_number = date_object.month
                            if month_number == int(month):
                                table.add_row([employee_id, date, information["Base salary"], information["Tax"],information["Allowance"], information["Bonus"], information["Net salary"]])

                            
                    # Print the table
                    os.system('cls')
                    print(f'This is a list of all salaries of {employee_id} in month of {month}')
            print(table,'\n')
                    

        except FileNotFoundError:
            os.system('cls')
            print("The file not found")


    def generate_payslip(self, employee_id, details):

        try:
            with open('employee_database.json', mode='r') as employee_database:
                employees = json.load(employee_database)
                

                if employee_id not in employees:
                    os.system('cls')
                    return f"Employee ID {employee_id} not found, please chech your spelling or you did not work."
                else:
                    name = employees[employee_id]['first_name'] + ' ' + employees[employee_id]['last_name']
                    company_name = "This is the payslip for CMU AFrica employees"
                    Job_level = employees[employee_id]['Job Level']
                    email = employees[employee_id]['email']

                    payslip = f"\n\n{company_name:<25}\nEmployee name: {name:<25}\nEmployee email: {email:<25} \nJob Level: {Job_level:<25}\n"
                    payslip += "_________________________________________________________\n"
                    for date, attributes in details.items():
                        payslip += f"{'Date:':<25} {date}\n"
                        for attribute, value in attributes.items():
                            payslip += f"{attribute + ':':<25} {value}\n"
                        payslip += "_________________________________________________________\n"
                        payslip += 'For more details you can contact HR manager at info@company.org'
                        
                    return payslip
        except FileNotFoundError:
            os.system('cls')
            return None #"We don't have employees database"


    # elif Choice == '3': # Salary calculation

    def Salary_calculation(self):
        os.system('cls')
        print('\n You selected Salary calculation function you can perform\n1. Calculate salary\n2. View salary\n3. Generete payslips \n4. Exit')
        print('______________________________________________________________________')
        choice = input('Enter your choice: ')

        while choice not in ['1', '2', '3', '4']:
            os.system('cls')
            print('Invalid choice: Try Again!\n')
            print('1. Calculate salary\n2. View salary\n3. Generete payslips \n4. Exit')
            choice = input('Enter your choice: ')

        if choice == '1': # Calculate salary

            employee_db_file = self.__employee_database
            salary_data_file = self.__salary_database
            employee_id = input('Enter employee ID: ')

            from Salary import Salary
            Salary = Salary(employee_db_file, salary_data_file, employee_id)
            Salary.__main__()


        elif choice == '2': # View salary
            os.system('cls')
            self.view_salary_summary()

        elif choice == '3': # generate payslips
            os.system('cls')
            # Load the JSON data
            with open(self.__salary_database, "r") as f:
                data = json.load(f)

            # Create payslips and save them to .txt files
            for employee_id, details in data.items():
                payslip_text = self.generate_payslip(employee_id, details[0])  # Assuming each employee has one set of details
                with open(f"payslip_{employee_id}.txt", "w") as payslip_file:
                    payslip_file.write(f'{payslip_text}')
            os.system('cls')
            print("Payslips for last payrol are generated successfully, check the files on disk.\n")

        elif choice == '4':
            os.system('cls')
            print("Thanks for using HRMS\n")
            exit()



    def __main__(self):
            
        while True:
            print('___________________________________________________________________________________')
            print('Welcome to HRMIS')
            print('Which task do you want to achieve:\n1. Employee Management (Add, Remove, View)\n2. Attendance Tracking (Mark, Attendance report)\n3. Salary  (Calculate, Salary Report, Generate Payslips) \n4. Exit')
            print('___________________________________________________________________________________')
            Choice = input('Enter your choice: ')

            while Choice not in ['1', '2', '3', '4']:
                os.system('cls')
                print('Invalid choice: Try again!\n')
                print('___________________________________________________________________________________')
                print('Which task do you want to achieve:\n1. Employee Management (Add, Remove, View)\n2. Attendance Tracking (Mark, Attendance report)\n3. Salary  (Calculate, Salary Report, Generate Payslips) \n4. Exit')
                Choice = input('Enter your choice: ')

            if Choice != '4':
                if Choice == '1': # Employee management
                    self.employee_management()
                    continue

                elif Choice == '2': # Attendance tracking
                    self.attendance_tracking()
                    continue

                elif Choice == '3': # Salary information
                    self.Salary_calculation()
            else:
                os.system('cls')    
                print('Exiting... Thank you for using HRMIS\n')
                exit()

# Run the app
if __name__ == "__main__":
    HRMS = HRMIS('employee_database.json', 'attendance_record.json', 'salary_data.json')            
    HRMS.__main__()